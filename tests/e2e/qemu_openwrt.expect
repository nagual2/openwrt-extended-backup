#!/usr/bin/env expect -f

set usage "Usage: qemu_openwrt.expect <image_path> <artifact_dir> <serial_log> <host_http_port> <host_fetch_port>"
if {[llength $argv] != 5} {
    puts stderr $usage
    exit 64
}

set image_path [lindex $argv 0]
set artifact_dir [lindex $argv 1]
set serial_log [lindex $argv 2]
set host_http_port [lindex $argv 3]
set host_fetch_port [lindex $argv 4]

file mkdir $artifact_dir

set timeout 600
log_file -noappend $serial_log

proc run_command {cmd prompt_re} {
    send -- "$cmd; printf '__E2E_RC__%s__\\n' \\$?\r"
    set exit_code ""
    expect {
        -re {__E2E_RC__([0-9]+)__} {
            set exit_code $expect_out(1,string)
        }
        timeout {
            error "Timeout waiting for command exit code: $cmd"
        }
    }
    if {$exit_code eq ""} {
        error "Failed to capture exit code for command: $cmd"
    }
    if {$exit_code ne "0"} {
        error "Command failed with exit code $exit_code: $cmd"
    }
    expect {
        -re $prompt_re {}
        timeout {
            error "Timeout waiting for prompt after command: $cmd"
        }
    }
}

set prompt_re {\r\nroot@OpenWrt:[^\r\n]*# }
set hostfwd_arg "hostfwd=tcp::${host_fetch_port}-:8080"
set nic_arg "user,model=virtio-net-pci,$hostfwd_arg"
set drive_arg "if=virtio,format=raw,file=$image_path"

set qemu_cmd [list qemu-system-x86_64 -M q35 -m 512 -smp 1 -nographic -snapshot -drive $drive_arg -nic $nic_arg]
puts "E2E: launching QEMU: $qemu_cmd"
flush stdout

spawn {*}$qemu_cmd

set login_timeout 240
set timeout $login_timeout

expect {
    -re "Please press Enter" {
        send "\r"
        exp_continue
    }
    "login:" {
        send "root\r"
    }
    timeout {
        error "Timed out waiting for login prompt"
    }
}

set timeout 300
expect {
    -re $prompt_re {}
    timeout {
        error "Timed out waiting for shell prompt after login"
    }
}

run_command "mkdir -p /root/e2e" $prompt_re
run_command "wget -qO /root/e2e/openwrt_full_backup http://10.0.2.2:$host_http_port/scripts/openwrt_full_backup" $prompt_re
run_command "chmod +x /root/e2e/openwrt_full_backup" $prompt_re
run_command "mkdir -p /overlay/upper/etc/e2e" $prompt_re
run_command "echo 'payload from e2e' > /overlay/upper/etc/e2e/message.txt" $prompt_re
run_command "echo 'extra validation' > /overlay/upper/etc/e2e/extra.txt" $prompt_re
run_command "/root/e2e/openwrt_full_backup --export=local --out-dir /tmp" $prompt_re

run_command "tarball=\$(ls /tmp/fullbackup_*.tar.gz | head -n 1)" $prompt_re

send -- "echo \"__E2E_TARBALL__ \$tarball\"\r"
set tarball_path ""
expect {
    -re {__E2E_TARBALL__ ([^\r\n]+)} {
        set tarball_path $expect_out(1,string)
    }
    timeout {
        error "Failed to read back tarball path"
    }
}
expect {
    -re $prompt_re {}
    timeout {
        error "Prompt missing after reporting tarball"
    }
}

if {$tarball_path eq ""} {
    error "Tarball path was empty"
}
set tarball_name [file tail $tarball_path]
puts "E2E: detected tarball $tarball_path"
flush stdout

run_command "busybox httpd -f -p 0.0.0.0:8080 -h /tmp &" $prompt_re
run_command "sleep 1" $prompt_re

set download_path [file normalize [file join $artifact_dir $tarball_name]]
set curl_cmd [list curl -fsS --retry 5 --retry-delay 1 -o $download_path http://127.0.0.1:$host_fetch_port/$tarball_name]
puts "E2E: downloading archive to $download_path"
flush stdout
if {[catch {exec {*}$curl_cmd} err]} {
    error "Failed to download archive via host port $host_fetch_port: $err"
}

run_command "sync" $prompt_re

send -- "poweroff\r"
set timeout 180
expect {
    eof {}
    timeout {
        error "Timed out waiting for QEMU to exit after poweroff"
    }
}

log_file
puts "E2E: QEMU session completed"
