name: shell quality

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  shell-quality:
    name: shell quality
    runs-on: ubuntu-latest
    env:
      CI_DEBUG_DIR: ci-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare debug artifacts directory
        run: mkdir -p "${CI_DEBUG_DIR}"

      - name: Configure vendored toolchain
        run: |
          set -euo pipefail
          echo "${GITHUB_WORKSPACE}/tools" >> "$GITHUB_PATH"
          echo "${GITHUB_WORKSPACE}/tools/bats-core/bin" >> "$GITHUB_PATH"

      - name: Print vendored tool versions
        shell: bash
        run: |
          set -euo pipefail
          tools/shellcheck -V || shellcheck -V
          tools/shfmt -version || shfmt -version
          tools/bats-core/bin/bats -v || bats -v

      - name: Discover shell scripts
        shell: bash
        run: |
          set -euo pipefail
          shell_files="shell-files.txt"
          : > "$shell_files"
          while IFS= read -r -d '' file; do
            if [ ! -f "$file" ]; then
              continue
            fi
            if head -n 1 "$file" | grep -Eq '^#!.*\b(sh|bash)\b'; then
              printf '%s\0' "$file" >> "$shell_files"
            fi
          done < <(git ls-files -z)
          if [ ! -s "$shell_files" ]; then
            echo "No shell scripts found to check. Skipping ShellCheck and shfmt steps."
          else
            tmp_sorted="$(mktemp)"
            LC_ALL=C sort -zu "$shell_files" > "$tmp_sorted"
            mv "$tmp_sorted" "$shell_files"
            echo "Shell scripts to check:"
            tr '\0' '\n' < "$shell_files"
          fi
          cp -f "$shell_files" "${CI_DEBUG_DIR}/shell-files.txt"

      - name: Run shellcheck
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s shell-files.txt ]; then
            echo "No shell scripts found. Skipping ShellCheck."
            exit 0
          fi
          log="${CI_DEBUG_DIR}/shellcheck.log"
          sc="tools/shellcheck"
          if [ ! -x "$sc" ]; then
            sc="shellcheck"
          fi
          rc_arg=()
          if [ -f .shellcheckrc ]; then
            if "$sc" --help 2>&1 | grep -q -- "--rcfile"; then
              rc_arg=(--rcfile=.shellcheckrc)
            else
              rc_arg=(--norc)
              echo "Note: ShellCheck without --rcfile; running with defaults" >&2
            fi
          else
            echo "Note: .shellcheckrc not found; running with defaults" >&2
            if "$sc" --help 2>&1 | grep -q -- "--norc"; then
              rc_arg=(--norc)
            fi
          fi
          xargs -0 -r "$sc" -s sh "${rc_arg[@]}" -- < shell-files.txt 2>&1 | tee "$log"

      - name: Check formatting with shfmt
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s shell-files.txt ]; then
            echo "No shell scripts found. Skipping shfmt."
            exit 0
          fi
          xargs -0 -r tools/shfmt -d -i 2 -bn -ci -sr -- < shell-files.txt 2>&1 | tee "${CI_DEBUG_DIR}/shfmt.log"

      - name: Run Bats tests
        env:
          BATS_SHELL: /bin/sh
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d tests ]; then
            echo "tests/ directory not found. Skipping Bats tests."
            exit 0
          fi
          tools/bats-core/bin/bats -r tests 2>&1 | tee "${CI_DEBUG_DIR}/bats.log"

      - name: Upload debug artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: shell-quality-debug
          path: |
            ${{ env.CI_DEBUG_DIR }}
            shell-files.txt
          if-no-files-found: ignore
