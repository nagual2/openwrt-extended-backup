name: shell quality

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  shell-quality:
    name: shell quality
    runs-on: ubuntu-latest
    env:
      CI_DEBUG_DIR: ci-debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare debug artifacts directory
        run: mkdir -p "${CI_DEBUG_DIR}"

      - name: Install dependencies
        run: |
          set -euo pipefail
          {
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y bats shellcheck curl ca-certificates busybox
          } 2>&1 | tee "${CI_DEBUG_DIR}/install-dependencies.log"

      - name: Install shfmt
        env:
          SHFMT_VERSION: "3.9.2"
        run: |
          set -euo pipefail
          {
            curl -sSfL "https://github.com/mvdan/sh/releases/download/v${SHFMT_VERSION}/shfmt_v${SHFMT_VERSION}_linux_amd64" -o shfmt
            sudo install -m 0755 shfmt /usr/local/bin/shfmt
          } 2>&1 | tee "${CI_DEBUG_DIR}/install-shfmt.log"

      - name: Discover shell scripts
        shell: bash
        run: |
          set -euo pipefail
          shell_files="shell-files.txt"
          : > "$shell_files"
          while IFS= read -r -d '' file; do
            if [ ! -f "$file" ]; then
              continue
            fi
            if head -n 1 "$file" | grep -Eq '^#!.*\b(sh|bash)\b'; then
              printf '%s\0' "$file" >> "$shell_files"
            fi
          done < <(git ls-files -z)
          if [ ! -s "$shell_files" ]; then
            echo "No shell scripts found to check. Skipping ShellCheck and shfmt steps."
          else
            tmp_sorted="$(mktemp)"
            LC_ALL=C sort -zu "$shell_files" > "$tmp_sorted"
            mv "$tmp_sorted" "$shell_files"
            echo "Shell scripts to check:"
            tr '\0' '\n' < "$shell_files"
          fi
          cp -f "$shell_files" "${CI_DEBUG_DIR}/shell-files.txt"

      - name: Run shellcheck
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s shell-files.txt ]; then
            echo "No shell scripts found. Skipping ShellCheck."
            exit 0
          fi
          log="${CI_DEBUG_DIR}/shellcheck.log"
          if [ -f .shellcheckrc ]; then
            xargs -0 -r shellcheck --config-file ".shellcheckrc" -s sh -- < shell-files.txt 2>&1 | tee "$log"
          else
            {
              echo "Warning: .shellcheckrc not found. Running ShellCheck with default configuration." >&2
              xargs -0 -r shellcheck -s sh -- < shell-files.txt
            } 2>&1 | tee "$log"
          fi

      - name: Check formatting with shfmt
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s shell-files.txt ]; then
            echo "No shell scripts found. Skipping shfmt."
            exit 0
          fi
          xargs -0 -r shfmt -d -i 2 -bn -ci -sr -- < shell-files.txt 2>&1 | tee "${CI_DEBUG_DIR}/shfmt.log"

      - name: Run Bats tests
        env:
          BATS_SHELL: /bin/sh
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d tests ]; then
            echo "tests/ directory not found. Skipping Bats tests."
            exit 0
          fi
          bats tests 2>&1 | tee "${CI_DEBUG_DIR}/bats.log"

      - name: Upload debug artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: shell-quality-debug
          path: |
            ${{ env.CI_DEBUG_DIR }}
            shell-files.txt
          if-no-files-found: ignore
